#!/usr/bin/python

import sys, os, os.path, string, glob, math
import random
import time
import datetime
import tempfile
import subprocess
import unittest
import argparse
import StringIO

# If we're using this directly from the albatross repo, we can find repo modules here:
if sys.path[0] != '':
    modules_dir = '%s/../modules' % (sys.path[0])
else:
    modules_dir='../modules'
sys.path += [modules_dir]

# import albatross repo modules
import utcondor

# inherit standard args from utcondor
parser = argparse.ArgumentParser(parents=[utcondor.parser])

grp = parser.add_argument_group(title='feature')
grp.add_argument('--feature', required=True, metavar='<name>', help='name of new feature')
grp.add_argument('--type', choices=['execute', 'scheduler', 'collector', 'e', 's', 'c'], default='execute', metavar='<type>', help='{execute|scheduler|collector} (def=execute)')
grp.add_argument('--no-append', action='store_false', default=True, dest='append', help='do not append to DAEMON_LIST: overwrite')

grp=parser.add_argument_group(title='execute feature')
grp.add_argument('--nstartd', type=int, metavar='<n>', default=1, help='(def=1)')
grp.add_argument('--nslots', type=int, metavar='<n>', default=1, help='(def=1)')
grp.add_argument('--ndynamic', type=int, metavar='<n>', default=0, help='(def=0 -- no dynamic)')
grp.add_argument('--no-dedicated', action='store_false', default=True, dest='dedicated', help='do not declare dedicated node behavior')
grp.add_argument('--preemption', action='store_true', default=False, dest='preemption', help='do not disable preemption')
grp.add_argument('--no-ad-machine', action='store_false', default=True, dest='ad_machine', help='do not advertise special multi-startd machine names')

grp=parser.add_argument_group(title='scheduler feature')
grp.add_argument('--nschedd', type=int, metavar='<n>', default=1, help='(def=1)')

grp=parser.add_argument_group(title='collector feature')
grp.add_argument('--ncollector', type=int, metavar='<n>', default=1, help='(def=1)')
grp.add_argument('--portstart', type=int, metavar='<port>', default=10000, help='(def=10000)')
grp.add_argument('--allow-plugins', action='store_true', default=False, help='do not explicitly disable plugins')

# parse args from command line
args = parser.parse_args()

# in this use case, we don't want to support restore
args.no_restore = True

# initialize utcondor params
utcondor.init(args)

ut = utcondor.condor_unit_test()
ut.setUp()

if args.type in ['execute', 'e']:
    ut.build_execute_feature(args.feature, n_startd=args.nstartd, n_slots=args.nslots, n_dynamic=args.ndynamic, dl_append=args.append, dedicated=args.dedicated, preemption=args.preemption, ad_machine=args.ad_machine)
elif args.type in ['scheduler', 's']:
    ut.build_scheduler_feature(args.feature, n_schedd=args.nschedd, dl_append=args.append)
elif args.type in ['collector', 'c']:
    ut.build_collector_feature(args.feature, n_coll=args.ncollector, dl_append=args.append, portstart=args.portstart, disable_plugins=(not args.allow_plugins))
else: pass
    

ut.tearDown()
